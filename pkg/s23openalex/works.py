import requests
import time
import bibtexparser
import base64

class Works:
    def __init__(self, oaid):
        self.oaid = oaid
        self.req = requests.get(f'https://api.openalex.org/works/{oaid}')
        self.data = self.req.json()
    
    @property
    def bibtex(self):
        _authors = [au['author']['display_name'] for au in self.data['authorships']]
        if len(_authors) == 1:
            authors = _authors[0]
        else:
            authors = ', '.join(_authors)
            
        # id should be generated by the parser, here I use the last name of the first author and the publication year
        id = _authors[0].split()[-1] + '_' + str(self.data['publication_year'])
        
        
        db = bibtexparser.bibdatabase.BibDatabase
        db.entries = [{'year': str(self.data['publication_year']),
                       'volume': self.data['biblio']['volume'],
                       'url': self.data['doi'],
                       'title': self.data['title'],
                       'pages': '-'.join([self.data['biblio']['first_page'], self.data['biblio']['last_page']]),
                       'number': self.data['biblio']['issue'],
                       'journal': self.data['host_venue']['display_name'],
                       'doi': self.data['doi'].replace("https://doi.org/", ""),
                       'author': authors,
                       'ENTRYTYPE': 'article',
                       'ID': id}]
        db.comments = []
        db.strings={}
        db.preambles=[]
        
        bibtex_str = bibtexparser.dumps(db)
        
        print(bibtex_str)
    
    @property
    def ris(self):
        fields = []
        if self.data['type'] == 'journal-article':
            fields += ['TY  - JOUR']
        else:
            raise Exception("Unsupported type {self.data['type']}")
        
        for author in self.data['authorships']:
            fields += [f'AU  - {author["author"]["display_name"]}']
            
        fields += [f'PY  - {self.data["publication_year"]}']
        fields += [f'TI  - {self.data["title"]}']
        fields += [f'JO  - {self.data["host_venue"]["display_name"]}']
        fields += [f'VL  - {self.data["biblio"]["volume"]}']
        
        if self.data['biblio']['issue']:
            fields += [f'IS  - {self.data["biblio"]["issue"]}']
        
        
        fields += [f'SP  - {self.data["biblio"]["first_page"]}']
        fields += [f'EP  - {self.data["biblio"]["last_page"]}']
        fields += [f'DO  - {self.data["doi"]}']
        fields += ['ER  -']
                
        ris = '\n'.join(fields)
        ris64 = base64.b64encode(ris.encode('utf-8')).decode('utf8')
        # Notice the <pre> below: meaning pre-formatted
        uri = f'<pre>{ris}<pre><br><a href="data:text/plain;base64,{ris64}" download="ris">Download RIS</a>'
        from IPython.display import HTML
        return HTML(uri)
